/**
 * Tripletex API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Invoice } from './invoice';
import { Customer } from './customer';
import { OrderGroup } from './orderGroup';
import { DeliveryAddress } from './deliveryAddress';
import { Change } from './change';
import { Document } from './document';
import { Contact } from './contact';
import { Project } from './project';
import { Department } from './department';
import { Employee } from './employee';
import { OrderLine } from './orderLine';
import { Currency } from './currency';
import { TravelExpense } from './travelExpense';


export interface Order { 
    id?: number;
    version?: number;
    readonly changes?: Array<Change>;
    readonly url?: string;
    customer: Customer;
    contact?: Contact;
    attn?: Contact;
    readonly displayName?: string;
    receiverEmail?: string;
    overdueNoticeEmail?: string;
    number?: string;
    reference?: string;
    ourContact?: Contact;
    ourContactEmployee?: Employee;
    department?: Department;
    orderDate: string;
    project?: Project;
    /**
     * Comment to be displayed in the invoice based on this order. Can be also found in Invoice.invoiceComment on Invoice objects.
     */
    invoiceComment?: string;
    currency?: Currency;
    /**
     * Number of days/months in which invoices created from this order is due
     */
    invoicesDueIn?: number;
    /**
     * Logistics only
     */
    status?: Order.StatusEnum;
    /**
     * Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this order. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.
     */
    invoicesDueInType?: Order.InvoicesDueInTypeEnum;
    /**
     * Show account statement - open posts on invoices created from this order
     */
    isShowOpenPostsOnInvoices?: boolean;
    /**
     * Denotes if this order is closed. A closed order can no longer be invoiced unless it is opened again.
     */
    isClosed?: boolean;
    deliveryDate: string;
    deliveryAddress?: DeliveryAddress;
    deliveryComment?: string;
    isPrioritizeAmountsIncludingVat?: boolean;
    orderLineSorting?: Order.OrderLineSortingEnum;
    /**
     * Order line groups
     */
    orderGroups?: Array<OrderGroup>;
    /**
     * Order lines tied to the order. New OrderLines may be embedded here, in some endpoints.
     */
    orderLines?: Array<OrderLine>;
    /**
     * If true, the order is a subscription, which enables periodical invoicing of order lines. First, create an order with isSubscription=true, then approve it for subscription invoicing with the :approveSubscriptionInvoice method.
     */
    isSubscription?: boolean;
    /**
     * Number of months/years the subscription shall run
     */
    subscriptionDuration?: number;
    /**
     * The time unit of subscriptionDuration
     */
    subscriptionDurationType?: Order.SubscriptionDurationTypeEnum;
    /**
     * Number of periods on each invoice
     */
    subscriptionPeriodsOnInvoice?: number;
    /**
     * The time unit of subscriptionPeriodsOnInvoice
     */
    readonly subscriptionPeriodsOnInvoiceType?: Order.SubscriptionPeriodsOnInvoiceTypeEnum;
    /**
     * Invoicing in advance/in arrears
     */
    subscriptionInvoicingTimeInAdvanceOrArrears?: Order.SubscriptionInvoicingTimeInAdvanceOrArrearsEnum;
    /**
     * Number of days/months invoicing in advance/in arrears
     */
    subscriptionInvoicingTime?: number;
    /**
     * The time unit of subscriptionInvoicingTime
     */
    subscriptionInvoicingTimeType?: Order.SubscriptionInvoicingTimeTypeEnum;
    /**
     * Automatic invoicing. Starts when the subscription is approved
     */
    isSubscriptionAutoInvoicing?: boolean;
    preliminaryInvoice?: Invoice;
    /**
     * [BETA] Attachments belonging to this order
     */
    readonly attachment?: Array<Document>;
    /**
     * Description of how this invoice will be sent
     */
    sendMethodDescription?: string;
    readonly canCreateBackorder?: boolean;
    /**
     * Is the on account(a konto) amounts including vat 
     */
    invoiceOnAccountVatHigh?: boolean;
    /**
     * Amount paid on account(a konto)
     */
    readonly totalInvoicedOnAccountAmountAbsoluteCurrency?: number;
    /**
     * Is sms-notification on/off
     */
    readonly invoiceSendSMSNotification?: boolean;
    /**
     * The phone number of the receiver of sms notifications. Must be a norwegian phone number
     */
    invoiceSMSNotificationNumber?: string;
    /**
     * Set mark-up (%) for order lines.
     */
    markUpOrderLines?: number;
    /**
     * Default discount percentage for order lines.
     */
    discountPercentage?: number;
    readonly customerName?: string;
    readonly projectManagerNameAndNumber?: string;
    /**
     * Travel reports connected to the order.
     */
    readonly travelReports?: Array<TravelExpense>;
}
export namespace Order {
    export type StatusEnum = 'NOT_CHOSEN' | 'NEW' | 'CONFIRMATION_SENT' | 'READY_FOR_PICKING' | 'PICKED' | 'PACKED' | 'READY_FOR_SHIPPING' | 'READY_FOR_INVOICING' | 'INVOICED' | 'CANCELLED';
    export const StatusEnum = {
        NotChosen: 'NOT_CHOSEN' as StatusEnum,
        New: 'NEW' as StatusEnum,
        ConfirmationSent: 'CONFIRMATION_SENT' as StatusEnum,
        ReadyForPicking: 'READY_FOR_PICKING' as StatusEnum,
        Picked: 'PICKED' as StatusEnum,
        Packed: 'PACKED' as StatusEnum,
        ReadyForShipping: 'READY_FOR_SHIPPING' as StatusEnum,
        ReadyForInvoicing: 'READY_FOR_INVOICING' as StatusEnum,
        Invoiced: 'INVOICED' as StatusEnum,
        Cancelled: 'CANCELLED' as StatusEnum
    };
    export type InvoicesDueInTypeEnum = 'DAYS' | 'MONTHS' | 'RECURRING_DAY_OF_MONTH';
    export const InvoicesDueInTypeEnum = {
        Days: 'DAYS' as InvoicesDueInTypeEnum,
        Months: 'MONTHS' as InvoicesDueInTypeEnum,
        RecurringDayOfMonth: 'RECURRING_DAY_OF_MONTH' as InvoicesDueInTypeEnum
    };
    export type OrderLineSortingEnum = 'ID' | 'PRODUCT' | 'CUSTOM';
    export const OrderLineSortingEnum = {
        Id: 'ID' as OrderLineSortingEnum,
        Product: 'PRODUCT' as OrderLineSortingEnum,
        Custom: 'CUSTOM' as OrderLineSortingEnum
    };
    export type SubscriptionDurationTypeEnum = 'MONTHS' | 'YEAR';
    export const SubscriptionDurationTypeEnum = {
        Months: 'MONTHS' as SubscriptionDurationTypeEnum,
        Year: 'YEAR' as SubscriptionDurationTypeEnum
    };
    export type SubscriptionPeriodsOnInvoiceTypeEnum = 'MONTHS';
    export const SubscriptionPeriodsOnInvoiceTypeEnum = {
        Months: 'MONTHS' as SubscriptionPeriodsOnInvoiceTypeEnum
    };
    export type SubscriptionInvoicingTimeInAdvanceOrArrearsEnum = 'ADVANCE' | 'ARREARS';
    export const SubscriptionInvoicingTimeInAdvanceOrArrearsEnum = {
        Advance: 'ADVANCE' as SubscriptionInvoicingTimeInAdvanceOrArrearsEnum,
        Arrears: 'ARREARS' as SubscriptionInvoicingTimeInAdvanceOrArrearsEnum
    };
    export type SubscriptionInvoicingTimeTypeEnum = 'DAYS' | 'MONTHS';
    export const SubscriptionInvoicingTimeTypeEnum = {
        Days: 'DAYS' as SubscriptionInvoicingTimeTypeEnum,
        Months: 'MONTHS' as SubscriptionInvoicingTimeTypeEnum
    };
}



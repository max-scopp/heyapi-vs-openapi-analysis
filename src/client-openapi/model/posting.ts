/**
 * Tripletex API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Account } from './account';
import { Customer } from './customer';
import { Product } from './product';
import { Change } from './change';
import { VatType } from './vatType';
import { Voucher } from './voucher';
import { Project } from './project';
import { Department } from './department';
import { ProductUnit } from './productUnit';
import { Employee } from './employee';
import { Currency } from './currency';
import { CloseGroup } from './closeGroup';
import { Supplier } from './supplier';


export interface Posting { 
    id?: number;
    version?: number;
    readonly changes?: Array<Change>;
    readonly url?: string;
    voucher?: Voucher;
    date?: string;
    description?: string;
    account?: Account;
    amortizationAccount?: Account;
    /**
     * Amortization start date. AmortizationAccountId, amortizationStartDate and amortizationEndDate should be provided.
     */
    amortizationStartDate?: string;
    amortizationEndDate?: string;
    customer?: Customer;
    supplier?: Supplier;
    employee?: Employee;
    project?: Project;
    product?: Product;
    department?: Department;
    vatType?: VatType;
    amount?: number;
    amountCurrency?: number;
    amountGross?: number;
    amountGrossCurrency?: number;
    currency?: Currency;
    closeGroup?: CloseGroup;
    invoiceNumber?: string;
    termOfPayment?: string;
    row?: number;
    readonly type?: Posting.TypeEnum;
    /**
     * External reference for identifying payment basis of the posting, e.g., KID, customer identification or credit note number.
     */
    readonly externalRef?: string;
    readonly systemGenerated?: boolean;
    readonly taxTransactionType?: string;
    readonly taxTransactionTypeId?: number;
    readonly matched?: boolean;
    /**
     * The quantity amount associated with the posting
     */
    quantityAmount1?: number;
    quantityType1?: ProductUnit;
    /**
     * The quantity amount associated with the posting
     */
    quantityAmount2?: number;
    quantityType2?: ProductUnit;
    /**
     * Is vat code readonly?
     */
    readonly isVatReadonly?: boolean;
    /**
     * Is amount of this posting (for VAT purposes) changeable
     */
    readonly isAmountVatClosed?: boolean;
    /**
     * The payment type id associated with the posting. This ID will only be set if the payment types used is an internal payment type like \'Nettbank\' - it is not set if the payment is a bank payment like AutoPay or ZTL.
     */
    postingRuleId?: number;
}
export namespace Posting {
    export type TypeEnum = 'INCOMING_PAYMENT' | 'INCOMING_PAYMENT_OPPOSITE' | 'INCOMING_INVOICE_CUSTOMER_POSTING' | 'INVOICE_EXPENSE' | 'OUTGOING_INVOICE_CUSTOMER_POSTING' | 'WAGE';
    export const TypeEnum = {
        IncomingPayment: 'INCOMING_PAYMENT' as TypeEnum,
        IncomingPaymentOpposite: 'INCOMING_PAYMENT_OPPOSITE' as TypeEnum,
        IncomingInvoiceCustomerPosting: 'INCOMING_INVOICE_CUSTOMER_POSTING' as TypeEnum,
        InvoiceExpense: 'INVOICE_EXPENSE' as TypeEnum,
        OutgoingInvoiceCustomerPosting: 'OUTGOING_INVOICE_CUSTOMER_POSTING' as TypeEnum,
        Wage: 'WAGE' as TypeEnum
    };
}



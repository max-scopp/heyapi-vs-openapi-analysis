/**
 * Tripletex API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Employee } from './employee';
import { SalesModule } from './salesModule';


export interface CustomerTripletexAccount2 { 
    administrator?: Employee;
    /**
     * The customer id to an already created customer to create a Tripletex account for.
     */
    customerId?: number;
    /**
     * If the accounting office is both an accountant and an auditor
     */
    accessRequestType?: CustomerTripletexAccount2.AccessRequestTypeEnum;
    modules: Array<SalesModule>;
    type: CustomerTripletexAccount2.TypeEnum;
    /**
     * Should the emails normally sent during creation be sent in this case?
     */
    sendEmails?: boolean;
    /**
     * Should the user be automatically validated? SendEmails must be false for this to have any effect.
     */
    autoValidateUserLogin?: boolean;
    /**
     * Creates a token for the admin user. The accounting office could also use their tokens so you might not need this.
     */
    createApiToken?: boolean;
    /**
     * Should the invoices for this account be sent to the customer?
     */
    sendInvoiceToCustomer?: boolean;
    /**
     * The address to send the invoice to at the customer.
     */
    customerInvoiceEmail?: string;
    /**
     * Should the receipt for this order be sent to the user creating the account?
     */
    creatorReceivingReceipt?: boolean;
    /**
     * The number of employees in the customer company. Is used for calculating prices and setting some default settings, i.e. approval settings for timesheet.
     */
    numberOfEmployees?: number;
    /**
     * Available for school resellers only. Number of months the account should be valid for. If not set, the account will be valid for 6 months.
     */
    accountEndDatePeriod?: number;
    /**
     * The password of the administrator user.
     */
    administratorPassword?: string;
    /**
     * The chart of accounts to use for the new company
     */
    chartOfAccountsType?: CustomerTripletexAccount2.ChartOfAccountsTypeEnum;
    /**
     * VAT type
     */
    vatStatusType?: CustomerTripletexAccount2.VatStatusTypeEnum;
    /**
     * VAT period
     */
    vatTermType?: CustomerTripletexAccount2.VatTermTypeEnum;
    /**
     * Customer category 1 id, used to identify the previous accounting system
     */
    customerCategoryId1?: number;
    accountType?: CustomerTripletexAccount2.AccountTypeEnum;
}
export namespace CustomerTripletexAccount2 {
    export type AccessRequestTypeEnum = 'DEFAULT' | 'ACCOUNTANT' | 'AUDITOR';
    export const AccessRequestTypeEnum = {
        Default: 'DEFAULT' as AccessRequestTypeEnum,
        Accountant: 'ACCOUNTANT' as AccessRequestTypeEnum,
        Auditor: 'AUDITOR' as AccessRequestTypeEnum
    };
    export type TypeEnum = 'NONE' | 'ENK' | 'AS' | 'NUF' | 'ANS' | 'DA' | 'PRE' | 'KS' | 'ASA' | 'BBL' | 'BRL' | 'GFS' | 'SPA' | 'SF' | 'IKS' | 'KF_FKF' | 'FCD' | 'EOFG' | 'BA' | 'STI' | 'ORG' | 'ESEK' | 'SA' | 'SAM' | 'BO' | 'VPFO' | 'OS' | 'FLI' | 'Other';
    export const TypeEnum = {
        None: 'NONE' as TypeEnum,
        Enk: 'ENK' as TypeEnum,
        As: 'AS' as TypeEnum,
        Nuf: 'NUF' as TypeEnum,
        Ans: 'ANS' as TypeEnum,
        Da: 'DA' as TypeEnum,
        Pre: 'PRE' as TypeEnum,
        Ks: 'KS' as TypeEnum,
        Asa: 'ASA' as TypeEnum,
        Bbl: 'BBL' as TypeEnum,
        Brl: 'BRL' as TypeEnum,
        Gfs: 'GFS' as TypeEnum,
        Spa: 'SPA' as TypeEnum,
        Sf: 'SF' as TypeEnum,
        Iks: 'IKS' as TypeEnum,
        KfFkf: 'KF_FKF' as TypeEnum,
        Fcd: 'FCD' as TypeEnum,
        Eofg: 'EOFG' as TypeEnum,
        Ba: 'BA' as TypeEnum,
        Sti: 'STI' as TypeEnum,
        Org: 'ORG' as TypeEnum,
        Esek: 'ESEK' as TypeEnum,
        Sa: 'SA' as TypeEnum,
        Sam: 'SAM' as TypeEnum,
        Bo: 'BO' as TypeEnum,
        Vpfo: 'VPFO' as TypeEnum,
        Os: 'OS' as TypeEnum,
        Fli: 'FLI' as TypeEnum,
        Other: 'Other' as TypeEnum
    };
    export type ChartOfAccountsTypeEnum = 'DEFAULT' | 'MAMUT_STD_PAYROLL' | 'MAMUT_NARF_PAYROLL' | 'AGRO_FORRETNING_PAYROLL' | 'AGRO_LANDBRUK_PAYROLL' | 'AGRO_FISKE_PAYROLL' | 'AGRO_FORSOKSRING_PAYROLL' | 'AGRO_IDRETTSLAG_PAYROLL' | 'AGRO_FORENING_PAYROLL';
    export const ChartOfAccountsTypeEnum = {
        Default: 'DEFAULT' as ChartOfAccountsTypeEnum,
        MamutStdPayroll: 'MAMUT_STD_PAYROLL' as ChartOfAccountsTypeEnum,
        MamutNarfPayroll: 'MAMUT_NARF_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroForretningPayroll: 'AGRO_FORRETNING_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroLandbrukPayroll: 'AGRO_LANDBRUK_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroFiskePayroll: 'AGRO_FISKE_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroForsoksringPayroll: 'AGRO_FORSOKSRING_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroIdrettslagPayroll: 'AGRO_IDRETTSLAG_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroForeningPayroll: 'AGRO_FORENING_PAYROLL' as ChartOfAccountsTypeEnum
    };
    export type VatStatusTypeEnum = 'VAT_REGISTERED' | 'VAT_NOT_REGISTERED' | 'VAT_APPLICANT';
    export const VatStatusTypeEnum = {
        VatRegistered: 'VAT_REGISTERED' as VatStatusTypeEnum,
        VatNotRegistered: 'VAT_NOT_REGISTERED' as VatStatusTypeEnum,
        VatApplicant: 'VAT_APPLICANT' as VatStatusTypeEnum
    };
    export type VatTermTypeEnum = 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'FOUR_MONTHS' | 'SIX_MONTHS' | 'YEAR' | 'NOT_REGISTERED';
    export const VatTermTypeEnum = {
        OneMonth: 'ONE_MONTH' as VatTermTypeEnum,
        TwoMonths: 'TWO_MONTHS' as VatTermTypeEnum,
        ThreeMonths: 'THREE_MONTHS' as VatTermTypeEnum,
        FourMonths: 'FOUR_MONTHS' as VatTermTypeEnum,
        SixMonths: 'SIX_MONTHS' as VatTermTypeEnum,
        Year: 'YEAR' as VatTermTypeEnum,
        NotRegistered: 'NOT_REGISTERED' as VatTermTypeEnum
    };
    export type AccountTypeEnum = 'TEST' | 'PAYING' | 'FREE';
    export const AccountTypeEnum = {
        Test: 'TEST' as AccountTypeEnum,
        Paying: 'PAYING' as AccountTypeEnum,
        Free: 'FREE' as AccountTypeEnum
    };
}



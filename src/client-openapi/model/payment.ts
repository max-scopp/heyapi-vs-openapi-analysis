/**
 * Tripletex API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Account } from './account';
import { Bank } from './bank';
import { Employee } from './employee';
import { Posting } from './posting';
import { Currency } from './currency';
import { Change } from './change';
import { Voucher } from './voucher';


export interface Payment { 
    id?: number;
    version?: number;
    readonly changes?: Array<Change>;
    readonly url?: string;
    paymentSource?: Payment.PaymentSourceEnum;
    paymentDate?: string;
    readonly bookingDate?: string;
    readonly valueDate?: string;
    /**
     * In the specified currency.
     */
    amountCurrency?: number;
    currency?: Currency;
    readonly creditorName?: string;
    readonly creditorIbanOrBban?: string;
    readonly creditorBankName?: string;
    readonly creditorBankAddress?: string;
    readonly creditorBankPostalCode?: string;
    readonly creditorBankPostalCity?: string;
    /**
     * The payment status.NOT_APPROVED: Payment not approved yet.<br>APPROVED: Payment approved, but not yet sent to bank.<br>SENT_TO_AUTOPAY: Payment sent to bank.<br>RECEIVED_BY_BANK: Payment received by the bank.<br>ACCEPTED_BY_BANK: Payment that was accepted by the bank.<br>FAILED: Payment that failed.<br>CANCELLED: Cancelled payment.<br>SUCCESS: Payment that ended successfully.<br>
     */
    readonly status?: Payment.StatusEnum;
    /**
     * The payment status Id. Usually all the payments in one batch have the same status ID, at least to the point of being received by bank.NEW: Payment is new.<br>PENDING_SIGNING: Payment is sent to AutoPay but not signed yet, requires re-approving.<br>CANCELLED: Payment was cancelled by ERP.<br>ERROR: Payment that failed.<br>RECEIVED_BY_BANK: Payment was received by the bank.<br>ACCEPTED_BY_BANK: Payment was accepted by bank.<br>CANCELLED_IN_BANK: Payment was cancelled in bank.<br>REJECTED_BY_BANK: Payment was rejected by bank.<br>PAID: Payment is paid.<br>OTHER: In case status in unknown. Will never be a final status.<br>
     */
    statusId?: Payment.StatusIdEnum;
    readonly isFinalStatus?: boolean;
    readonly isForeignPayment?: boolean;
    readonly isSalary?: boolean;
    readonly description?: string;
    /**
     * KID - Kundeidentifikasjonsnummer.
     */
    readonly kid?: string;
    readonly receiverReference?: string;
    sourceVoucher?: Voucher;
    postings?: Posting;
    account?: Account;
    /**
     * Amount specified in the currency of the bank agreements account.
     */
    readonly amountInAccountCurrency?: number;
    /**
     * Can this payment date be changed.
     */
    readonly isDisabledForUpdate?: boolean;
    /**
     * Can this payment amount be changed.
     */
    readonly isDisabledForAmountChange?: boolean;
    /**
     * Is this payment selectable.
     */
    readonly isSelectable?: boolean;
    /**
     * Who approved this payment.
     */
    readonly acceptors?: Array<Employee>;
    /**
     * The payment category.
     */
    readonly paymentCategory?: Payment.PaymentCategoryEnum;
    /**
     * The payment filter status.
     */
    readonly displayStatus?: string;
    /**
     * Can this payment be approved.
     */
    readonly isApproveDisabled?: boolean;
    /**
     * Can this payment be deleted
     */
    readonly isDeleteDisabled?: boolean;
    /**
     * Can this payment be cancelled.
     */
    readonly isCancelDisabled?: boolean;
    /**
     * The url to access the connected invoice/wage period transaction/vat returns/wage transaction.
     */
    readonly urlForVoucher?: string;
    /**
     * Is the due date invalid, if this is a salary payment.
     */
    readonly isSalaryDateInvalid?: boolean;
    /**
     * Is this transaction expired.
     */
    readonly expired?: boolean;
    /**
     * The payment receiver link or name.
     */
    readonly receiverLink?: string;
    /**
     * Message regarding merging of banks
     */
    readonly mergingBanksMessage?: string;
    bank?: Bank;
}
export namespace Payment {
    export type PaymentSourceEnum = 'AutoPayTransaction' | 'ZtlTransaction';
    export const PaymentSourceEnum = {
        AutoPayTransaction: 'AutoPayTransaction' as PaymentSourceEnum,
        ZtlTransaction: 'ZtlTransaction' as PaymentSourceEnum
    };
    export type StatusEnum = 'NOT_APPROVED' | 'CANCELLED' | 'APPROVED' | 'SENT_TO_AUTOPAY' | 'RECEIVED_BY_BANK' | 'ACCEPTED_BY_BANK' | 'FAILED' | 'SUCCESS' | 'NOT_UPDATED' | 'ON_HOLD' | 'IMPORTED' | 'INITIALIZED' | 'AUTHORIZATION_REQUIRED' | 'SETTLEMENT_IN_PROGRESS' | 'REJECTED' | 'BOOKED' | 'SETTLEMENT_COMPLETED' | 'BATCH_FAILED' | 'BATCH_TIMEOUT' | 'CANCEL_PENDING' | 'PAYROLL_AWAITING_AUTHORIZATION' | 'PAYROLL_SETTLEMENT_IN_PROGRESS' | 'PAYROLL_SETTLEMENT_COMPLETED' | 'PAYROLL_CANCELLED' | 'PAYROLL_SETTLEMENT_NOT_COMPLETED_IN_TIME' | 'PAYROLL_PAYMENT_INITIATED' | 'PAYROLL_PAYMENT_ACCEPTED_TECHNICAL_VALIDATION' | 'PAYROLL_ACCEPTED_FOR_EXECUTION' | 'PAYROLL_FAILED' | 'PAYROLL_EXECUTION_COMPLETED' | 'AUTHORIZATION_REQUIRED_MULTIPLE_APPROVERS' | 'REJECTED_FUNDS_NOT_RECEIVED_IN_TIME';
    export const StatusEnum = {
        NotApproved: 'NOT_APPROVED' as StatusEnum,
        Cancelled: 'CANCELLED' as StatusEnum,
        Approved: 'APPROVED' as StatusEnum,
        SentToAutopay: 'SENT_TO_AUTOPAY' as StatusEnum,
        ReceivedByBank: 'RECEIVED_BY_BANK' as StatusEnum,
        AcceptedByBank: 'ACCEPTED_BY_BANK' as StatusEnum,
        Failed: 'FAILED' as StatusEnum,
        Success: 'SUCCESS' as StatusEnum,
        NotUpdated: 'NOT_UPDATED' as StatusEnum,
        OnHold: 'ON_HOLD' as StatusEnum,
        Imported: 'IMPORTED' as StatusEnum,
        Initialized: 'INITIALIZED' as StatusEnum,
        AuthorizationRequired: 'AUTHORIZATION_REQUIRED' as StatusEnum,
        SettlementInProgress: 'SETTLEMENT_IN_PROGRESS' as StatusEnum,
        Rejected: 'REJECTED' as StatusEnum,
        Booked: 'BOOKED' as StatusEnum,
        SettlementCompleted: 'SETTLEMENT_COMPLETED' as StatusEnum,
        BatchFailed: 'BATCH_FAILED' as StatusEnum,
        BatchTimeout: 'BATCH_TIMEOUT' as StatusEnum,
        CancelPending: 'CANCEL_PENDING' as StatusEnum,
        PayrollAwaitingAuthorization: 'PAYROLL_AWAITING_AUTHORIZATION' as StatusEnum,
        PayrollSettlementInProgress: 'PAYROLL_SETTLEMENT_IN_PROGRESS' as StatusEnum,
        PayrollSettlementCompleted: 'PAYROLL_SETTLEMENT_COMPLETED' as StatusEnum,
        PayrollCancelled: 'PAYROLL_CANCELLED' as StatusEnum,
        PayrollSettlementNotCompletedInTime: 'PAYROLL_SETTLEMENT_NOT_COMPLETED_IN_TIME' as StatusEnum,
        PayrollPaymentInitiated: 'PAYROLL_PAYMENT_INITIATED' as StatusEnum,
        PayrollPaymentAcceptedTechnicalValidation: 'PAYROLL_PAYMENT_ACCEPTED_TECHNICAL_VALIDATION' as StatusEnum,
        PayrollAcceptedForExecution: 'PAYROLL_ACCEPTED_FOR_EXECUTION' as StatusEnum,
        PayrollFailed: 'PAYROLL_FAILED' as StatusEnum,
        PayrollExecutionCompleted: 'PAYROLL_EXECUTION_COMPLETED' as StatusEnum,
        AuthorizationRequiredMultipleApprovers: 'AUTHORIZATION_REQUIRED_MULTIPLE_APPROVERS' as StatusEnum,
        RejectedFundsNotReceivedInTime: 'REJECTED_FUNDS_NOT_RECEIVED_IN_TIME' as StatusEnum
    };
    export type StatusIdEnum = 'NEW' | 'PENDING_SIGNING' | 'CANCELLED' | 'ERROR' | 'RECEIVED_BY_BANK' | 'ACCEPTED_BY_BANK' | 'CANCELLED_IN_BANK' | 'REJECTED_BY_BANK' | 'PAID' | 'OTHER';
    export const StatusIdEnum = {
        New: 'NEW' as StatusIdEnum,
        PendingSigning: 'PENDING_SIGNING' as StatusIdEnum,
        Cancelled: 'CANCELLED' as StatusIdEnum,
        Error: 'ERROR' as StatusIdEnum,
        ReceivedByBank: 'RECEIVED_BY_BANK' as StatusIdEnum,
        AcceptedByBank: 'ACCEPTED_BY_BANK' as StatusIdEnum,
        CancelledInBank: 'CANCELLED_IN_BANK' as StatusIdEnum,
        RejectedByBank: 'REJECTED_BY_BANK' as StatusIdEnum,
        Paid: 'PAID' as StatusIdEnum,
        Other: 'OTHER' as StatusIdEnum
    };
    export type PaymentCategoryEnum = 'TRANSFER_BETWEEN_ACCOUNTS' | 'REIMBURSEMENT' | 'SUPPLIER_INVOICE' | 'WITHHOLDING_TAX' | 'TAX_DEDUCTION' | 'VAT' | 'SALARY' | 'ENI' | 'REGISTERED';
    export const PaymentCategoryEnum = {
        TransferBetweenAccounts: 'TRANSFER_BETWEEN_ACCOUNTS' as PaymentCategoryEnum,
        Reimbursement: 'REIMBURSEMENT' as PaymentCategoryEnum,
        SupplierInvoice: 'SUPPLIER_INVOICE' as PaymentCategoryEnum,
        WithholdingTax: 'WITHHOLDING_TAX' as PaymentCategoryEnum,
        TaxDeduction: 'TAX_DEDUCTION' as PaymentCategoryEnum,
        Vat: 'VAT' as PaymentCategoryEnum,
        Salary: 'SALARY' as PaymentCategoryEnum,
        Eni: 'ENI' as PaymentCategoryEnum,
        Registered: 'REGISTERED' as PaymentCategoryEnum
    };
}



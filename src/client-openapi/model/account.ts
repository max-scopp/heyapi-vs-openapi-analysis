/**
 * Tripletex API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Department } from './department';
import { ProductUnit } from './productUnit';
import { Currency } from './currency';
import { Country } from './country';
import { Change } from './change';
import { VatType } from './vatType';


export interface Account { 
    id?: number;
    version?: number;
    readonly changes?: Array<Change>;
    readonly url?: string;
    number: number;
    /**
     * number pretty
     */
    readonly numberPretty?: string;
    name: string;
    description?: string;
    readonly type?: Account.TypeEnum;
    /**
     * List of legal vat types for this account.
     */
    readonly legalVatTypes?: Array<VatType>;
    /**
     * Supported ledger types, default is GENERAL. Only available for customers with the module multiple ledgers.
     */
    ledgerType?: Account.LedgerTypeEnum;
    /**
     * The balance group for this account.
     */
    readonly balanceGroup?: string;
    vatType?: VatType;
    /**
     * True if all entries on this account must have the vat type given by vatType.
     */
    vatLocked?: boolean;
    currency?: Currency;
    /**
     * True if it should be possible to close entries on this account and it is possible to filter on open entries.
     */
    isCloseable?: boolean;
    /**
     * True if this account is applicable for supplier invoice registration.
     */
    isApplicableForSupplierInvoice?: boolean;
    /**
     * True if this account must be reconciled before the accounting period closure.
     */
    requireReconciliation?: boolean;
    /**
     * Inactive accounts will not show up in UI lists.
     */
    isInactive?: boolean;
    isBankAccount?: boolean;
    isInvoiceAccount?: boolean;
    bankAccountNumber?: string;
    bankAccountCountry?: Country;
    bankName?: string;
    bankAccountIBAN?: string;
    bankAccountSWIFT?: string;
    /**
     * SAF-T 1.0 standard account ID for account. It will be given a default value based on account number if empty.
     */
    saftCode?: string;
    /**
     * SAF-T 1.3 groupingCode for the account. It will be given a default value based on account number if empty.
     */
    groupingCode?: string;
    displayName?: string;
    /**
     * Posting against this account requires department.
     */
    requiresDepartment?: boolean;
    /**
     * Posting against this account requires project.
     */
    requiresProject?: boolean;
    invoicingDepartment?: Department;
    isPostingsExist?: boolean;
    quantityType1?: ProductUnit;
    quantityType2?: ProductUnit;
    department?: Department;
}
export namespace Account {
    export type TypeEnum = 'ASSETS' | 'EQUITY' | 'LIABILITIES' | 'OPERATING_REVENUES' | 'OPERATING_EXPENSES' | 'INVESTMENT_INCOME' | 'COST_OF_CAPITAL' | 'TAX_ON_ORDINARY_ACTIVITIES' | 'EXTRAORDINARY_INCOME' | 'EXTRAORDINARY_COST' | 'TAX_ON_EXTRAORDINARY_ACTIVITIES' | 'ANNUAL_RESULT' | 'TRANSFERS_AND_ALLOCATIONS';
    export const TypeEnum = {
        Assets: 'ASSETS' as TypeEnum,
        Equity: 'EQUITY' as TypeEnum,
        Liabilities: 'LIABILITIES' as TypeEnum,
        OperatingRevenues: 'OPERATING_REVENUES' as TypeEnum,
        OperatingExpenses: 'OPERATING_EXPENSES' as TypeEnum,
        InvestmentIncome: 'INVESTMENT_INCOME' as TypeEnum,
        CostOfCapital: 'COST_OF_CAPITAL' as TypeEnum,
        TaxOnOrdinaryActivities: 'TAX_ON_ORDINARY_ACTIVITIES' as TypeEnum,
        ExtraordinaryIncome: 'EXTRAORDINARY_INCOME' as TypeEnum,
        ExtraordinaryCost: 'EXTRAORDINARY_COST' as TypeEnum,
        TaxOnExtraordinaryActivities: 'TAX_ON_EXTRAORDINARY_ACTIVITIES' as TypeEnum,
        AnnualResult: 'ANNUAL_RESULT' as TypeEnum,
        TransfersAndAllocations: 'TRANSFERS_AND_ALLOCATIONS' as TypeEnum
    };
    export type LedgerTypeEnum = 'GENERAL' | 'CUSTOMER' | 'VENDOR' | 'EMPLOYEE' | 'ASSET';
    export const LedgerTypeEnum = {
        General: 'GENERAL' as LedgerTypeEnum,
        Customer: 'CUSTOMER' as LedgerTypeEnum,
        Vendor: 'VENDOR' as LedgerTypeEnum,
        Employee: 'EMPLOYEE' as LedgerTypeEnum,
        Asset: 'ASSET' as LedgerTypeEnum
    };
}



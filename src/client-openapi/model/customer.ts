/**
 * Tripletex API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { CustomerCategory } from './customerCategory';
import { Account } from './account';
import { CompanyBankAccountPresentation } from './companyBankAccountPresentation';
import { Department } from './department';
import { Employee } from './employee';
import { Address } from './address';
import { Currency } from './currency';
import { DeliveryAddress } from './deliveryAddress';
import { Change } from './change';


export interface Customer { 
    id?: number;
    version?: number;
    readonly changes?: Array<Change>;
    readonly url?: string;
    name: string;
    organizationNumber?: string;
    globalLocationNumber?: number;
    supplierNumber?: number;
    customerNumber?: number;
    /**
     * Defines if the customer is also a supplier.
     */
    isSupplier?: boolean;
    readonly isCustomer?: boolean;
    isInactive?: boolean;
    accountManager?: Employee;
    department?: Department;
    email?: string;
    invoiceEmail?: string;
    /**
     * The email address of the customer where the noticing emails are sent in case of an overdue
     */
    overdueNoticeEmail?: string;
    /**
     * [DEPRECATED] List of the bank account numbers for this customer. Norwegian bank account numbers only.
     */
    bankAccounts?: Array<string>;
    phoneNumber?: string;
    phoneNumberMobile?: string;
    description?: string;
    language?: Customer.LanguageEnum;
    displayName?: string;
    isPrivateIndividual?: boolean;
    /**
     * Enables various orders on one customer invoice.
     */
    singleCustomerInvoice?: boolean;
    /**
     * Define the invoicing method for the customer.<br>EMAIL: Send invoices as email.<br>EHF: Send invoices as EHF.<br>EFAKTURA: Send invoices as EFAKTURA.<br>AVTALEGIRO: Send invoices as AVTALEGIRO.<br>VIPPS: Send invoices through VIPPS.<br>PAPER: Send invoices as paper invoice.<br>MANUAL: User will have to send invocie manually.<br>
     */
    invoiceSendMethod?: Customer.InvoiceSendMethodEnum;
    /**
     * Define the invoice attachment type for emailing to the customer.<br>LINK: Send invoice as link in email.<br>ATTACHMENT: Send invoice as attachment in email.<br>
     */
    emailAttachmentType?: Customer.EmailAttachmentTypeEnum;
    postalAddress?: Address;
    physicalAddress?: Address;
    deliveryAddress?: DeliveryAddress;
    category1?: CustomerCategory;
    category2?: CustomerCategory;
    category3?: CustomerCategory;
    /**
     * Number of days/months in which invoices created from this customer is due
     */
    invoicesDueIn?: number;
    /**
     * Set the time unit of invoicesDueIn. The special case RECURRING_DAY_OF_MONTH enables the due date to be fixed to a specific day of the month, in this case the fixed due date will automatically be set as standard on all invoices created from this customer. Note that when RECURRING_DAY_OF_MONTH is set, the due date will be set to the last day of month if \"31\" is set in invoicesDueIn.
     */
    invoicesDueInType?: Customer.InvoicesDueInTypeEnum;
    currency?: Currency;
    /**
     * List of bankAccount for this customer
     */
    bankAccountPresentation?: Array<CompanyBankAccountPresentation>;
    ledgerAccount?: Account;
    /**
     * If true; send this customers invoices to factoring (if factoring is turned on in account).
     */
    isFactoring?: boolean;
    /**
     * Is sms-notification on/off
     */
    invoiceSendSMSNotification?: boolean;
    /**
     * Send SMS-notification to this number. Must be a norwegian phone number
     */
    invoiceSMSNotificationNumber?: string;
    /**
     * Has automatic soft reminders enabled for this customer.
     */
    isAutomaticSoftReminderEnabled?: boolean;
    /**
     * Has automatic reminders enabled for this customer.
     */
    isAutomaticReminderEnabled?: boolean;
    /**
     * Has automatic notice of debt collection enabled for this customer.
     */
    isAutomaticNoticeOfDebtCollectionEnabled?: boolean;
    /**
     * Default discount percentage for this customer.
     */
    discountPercentage?: number;
    website?: string;
}
export namespace Customer {
    export type LanguageEnum = 'NO' | 'EN';
    export const LanguageEnum = {
        No: 'NO' as LanguageEnum,
        En: 'EN' as LanguageEnum
    };
    export type InvoiceSendMethodEnum = 'EMAIL' | 'EHF' | 'EFAKTURA' | 'AVTALEGIRO' | 'VIPPS' | 'PAPER' | 'MANUAL';
    export const InvoiceSendMethodEnum = {
        Email: 'EMAIL' as InvoiceSendMethodEnum,
        Ehf: 'EHF' as InvoiceSendMethodEnum,
        Efaktura: 'EFAKTURA' as InvoiceSendMethodEnum,
        Avtalegiro: 'AVTALEGIRO' as InvoiceSendMethodEnum,
        Vipps: 'VIPPS' as InvoiceSendMethodEnum,
        Paper: 'PAPER' as InvoiceSendMethodEnum,
        Manual: 'MANUAL' as InvoiceSendMethodEnum
    };
    export type EmailAttachmentTypeEnum = 'LINK' | 'ATTACHMENT';
    export const EmailAttachmentTypeEnum = {
        Link: 'LINK' as EmailAttachmentTypeEnum,
        Attachment: 'ATTACHMENT' as EmailAttachmentTypeEnum
    };
    export type InvoicesDueInTypeEnum = 'DAYS' | 'MONTHS' | 'RECURRING_DAY_OF_MONTH';
    export const InvoicesDueInTypeEnum = {
        Days: 'DAYS' as InvoicesDueInTypeEnum,
        Months: 'MONTHS' as InvoicesDueInTypeEnum,
        RecurringDayOfMonth: 'RECURRING_DAY_OF_MONTH' as InvoicesDueInTypeEnum
    };
}



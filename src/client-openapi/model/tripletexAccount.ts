/**
 * Tripletex API
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Company } from './company';
import { Employee } from './employee';
import { SalesModule } from './salesModule';


export interface TripletexAccount { 
    company?: Company;
    administrator?: Employee;
    /**
     * Sales modules (functionality in the application) to activate for the newly created account. Some modules have extra costs.
     */
    modules: Array<SalesModule>;
    /**
     * Password for the administrator user to create. Not a part of the administrator employee object since this is a value that never can be read (it is salted and hashed before storing)
     */
    administratorPassword?: string;
    /**
     * Should the regular creation emails be sent to the company created and its users? If false you probably want to set autoValidateUserLogin to true
     */
    sendEmails?: boolean;
    /**
     * If true, the users created will be allowed to log in without validating their email address. ONLY USE THIS IF YOU ALREADY HAVE VALIDATED THE USER EMAILS. SendEmails must be false for this to have any effect.
     */
    autoValidateUserLogin?: boolean;
    /**
     * Create an API token for the administrator user for the consumer token used during this call. The token will be returned in the response.
     */
    createAdministratorApiToken?: boolean;
    /**
     * Create an API token for the company to use to call their clients, only possible for accounting and auditor accounts. The token will be returned in the response.
     */
    createCompanyOwnedApiToken?: boolean;
    /**
     * Should the company we are creating be able to create new Tripletex accounts?
     */
    mayCreateTripletexAccounts?: boolean;
    /**
     * Used to calculate prices.
     */
    numberOfVouchers?: TripletexAccount.NumberOfVouchersEnum;
    /**
     * The chart of accounts to use for the new company
     */
    chartOfAccountsType?: TripletexAccount.ChartOfAccountsTypeEnum;
    /**
     * VAT type
     */
    vatStatusType?: TripletexAccount.VatStatusTypeEnum;
    /**
     * VAT period
     */
    vatTermType?: TripletexAccount.VatTermTypeEnum;
    /**
     * Main bank account
     */
    bankAccount?: string;
    /**
     * Swedish post account number (PlusGirot)
     */
    postAccount?: string;
    /**
     * Number of users Prepaid. Only available for some consumers.
     */
    numberOfPrepaidUsers?: number;
    /**
     * CustomerCategoryId1
     */
    customerCategoryId1?: number;
    /**
     * Customer category id used to indicate that the customer is created by Salesforce
     */
    customerCategoryId2?: number;
    /**
     * Marketing consent
     */
    marketingConsent?: TripletexAccount.MarketingConsentEnum;
    /**
     * Start date for invoicing
     */
    invoiceStartDate?: string;
    /**
     * Email address used for invoices/reminders
     */
    invoiceEmail?: string;
    /**
     * Customer card id is used to indicate what customer account to use when creating the TripletexCompany object. 0 means customer account does not already exist.
     */
    customerCardId?: number;
    /**
     * Available for school resellers only. Number of months the account should be valid for. If not set, the account will be valid for 6 months.
     */
    accountEndDatePeriod?: number;
    /**
     * Terms and conditions
     */
    signedTC?: TripletexAccount.SignedTCEnum;
    accountingOffice?: boolean;
    auditor?: boolean;
    reseller?: boolean;
    accountType?: TripletexAccount.AccountTypeEnum;
}
export namespace TripletexAccount {
    export type NumberOfVouchersEnum = 'INTERVAL_0_100' | 'INTERVAL_101_500' | 'INTERVAL_0_500' | 'INTERVAL_501_1000' | 'INTERVAL_1001_2000' | 'INTERVAL_2001_3500' | 'INTERVAL_3501_5000' | 'INTERVAL_5001_10000' | 'INTERVAL_UNLIMITED';
    export const NumberOfVouchersEnum = {
        Interval0100: 'INTERVAL_0_100' as NumberOfVouchersEnum,
        Interval101500: 'INTERVAL_101_500' as NumberOfVouchersEnum,
        Interval0500: 'INTERVAL_0_500' as NumberOfVouchersEnum,
        Interval5011000: 'INTERVAL_501_1000' as NumberOfVouchersEnum,
        Interval10012000: 'INTERVAL_1001_2000' as NumberOfVouchersEnum,
        Interval20013500: 'INTERVAL_2001_3500' as NumberOfVouchersEnum,
        Interval35015000: 'INTERVAL_3501_5000' as NumberOfVouchersEnum,
        Interval500110000: 'INTERVAL_5001_10000' as NumberOfVouchersEnum,
        IntervalUnlimited: 'INTERVAL_UNLIMITED' as NumberOfVouchersEnum
    };
    export type ChartOfAccountsTypeEnum = 'DEFAULT' | 'MAMUT_STD_PAYROLL' | 'MAMUT_NARF_PAYROLL' | 'AGRO_FORRETNING_PAYROLL' | 'AGRO_LANDBRUK_PAYROLL' | 'AGRO_FISKE_PAYROLL' | 'AGRO_FORSOKSRING_PAYROLL' | 'AGRO_IDRETTSLAG_PAYROLL' | 'AGRO_FORENING_PAYROLL';
    export const ChartOfAccountsTypeEnum = {
        Default: 'DEFAULT' as ChartOfAccountsTypeEnum,
        MamutStdPayroll: 'MAMUT_STD_PAYROLL' as ChartOfAccountsTypeEnum,
        MamutNarfPayroll: 'MAMUT_NARF_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroForretningPayroll: 'AGRO_FORRETNING_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroLandbrukPayroll: 'AGRO_LANDBRUK_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroFiskePayroll: 'AGRO_FISKE_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroForsoksringPayroll: 'AGRO_FORSOKSRING_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroIdrettslagPayroll: 'AGRO_IDRETTSLAG_PAYROLL' as ChartOfAccountsTypeEnum,
        AgroForeningPayroll: 'AGRO_FORENING_PAYROLL' as ChartOfAccountsTypeEnum
    };
    export type VatStatusTypeEnum = 'VAT_REGISTERED' | 'VAT_NOT_REGISTERED' | 'VAT_APPLICANT';
    export const VatStatusTypeEnum = {
        VatRegistered: 'VAT_REGISTERED' as VatStatusTypeEnum,
        VatNotRegistered: 'VAT_NOT_REGISTERED' as VatStatusTypeEnum,
        VatApplicant: 'VAT_APPLICANT' as VatStatusTypeEnum
    };
    export type VatTermTypeEnum = 'ONE_MONTH' | 'TWO_MONTHS' | 'THREE_MONTHS' | 'FOUR_MONTHS' | 'SIX_MONTHS' | 'YEAR' | 'NOT_REGISTERED';
    export const VatTermTypeEnum = {
        OneMonth: 'ONE_MONTH' as VatTermTypeEnum,
        TwoMonths: 'TWO_MONTHS' as VatTermTypeEnum,
        ThreeMonths: 'THREE_MONTHS' as VatTermTypeEnum,
        FourMonths: 'FOUR_MONTHS' as VatTermTypeEnum,
        SixMonths: 'SIX_MONTHS' as VatTermTypeEnum,
        Year: 'YEAR' as VatTermTypeEnum,
        NotRegistered: 'NOT_REGISTERED' as VatTermTypeEnum
    };
    export type MarketingConsentEnum = 'DEFAULT' | 'GRANTED' | 'DENIED';
    export const MarketingConsentEnum = {
        Default: 'DEFAULT' as MarketingConsentEnum,
        Granted: 'GRANTED' as MarketingConsentEnum,
        Denied: 'DENIED' as MarketingConsentEnum
    };
    export type SignedTCEnum = 'DEFAULT' | 'GRANTED' | 'DENIED';
    export const SignedTCEnum = {
        Default: 'DEFAULT' as SignedTCEnum,
        Granted: 'GRANTED' as SignedTCEnum,
        Denied: 'DENIED' as SignedTCEnum
    };
    export type AccountTypeEnum = 'TEST' | 'PAYING' | 'FREE';
    export const AccountTypeEnum = {
        Test: 'TEST' as AccountTypeEnum,
        Paying: 'PAYING' as AccountTypeEnum,
        Free: 'FREE' as AccountTypeEnum
    };
}


